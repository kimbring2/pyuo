// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: test.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Test {
  public static partial class Pyuo
  {
    static readonly string __ServiceName = "test.Pyuo";

    static readonly grpc::Marshaller<global::Test.ImageRequest> __Marshaller_test_ImageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Test.ImageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Test.ImageResponse> __Marshaller_test_ImageResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Test.ImageResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Test.ImageRequest, global::Test.ImageResponse> __Method_Reset = new grpc::Method<global::Test.ImageRequest, global::Test.ImageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Reset",
        __Marshaller_test_ImageRequest,
        __Marshaller_test_ImageResponse);

    static readonly grpc::Method<global::Test.ImageRequest, global::Test.ImageResponse> __Method_Step = new grpc::Method<global::Test.ImageRequest, global::Test.ImageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Step",
        __Marshaller_test_ImageRequest,
        __Marshaller_test_ImageResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Test.TestReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Pyuo</summary>
    public abstract partial class PyuoBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Test.ImageResponse> Reset(global::Test.ImageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Test.ImageResponse> Step(global::Test.ImageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Pyuo</summary>
    public partial class PyuoClient : grpc::ClientBase<PyuoClient>
    {
      /// <summary>Creates a new client for Pyuo</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PyuoClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Pyuo that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PyuoClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PyuoClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PyuoClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Test.ImageResponse Reset(global::Test.ImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Reset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Test.ImageResponse Reset(global::Test.ImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Reset, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Test.ImageResponse> ResetAsync(global::Test.ImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Test.ImageResponse> ResetAsync(global::Test.ImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Reset, null, options, request);
      }
      public virtual global::Test.ImageResponse Step(global::Test.ImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Step(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Test.ImageResponse Step(global::Test.ImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Step, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Test.ImageResponse> StepAsync(global::Test.ImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StepAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Test.ImageResponse> StepAsync(global::Test.ImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Step, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PyuoClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PyuoClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(PyuoBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Reset, serviceImpl.Reset)
          .AddMethod(__Method_Step, serviceImpl.Step).Build();
    }

  }
}
#endregion
